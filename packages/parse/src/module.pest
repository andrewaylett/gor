// Go module syntax.
// Reference https://go.dev/ref/spec

module = { SOI ~ package ~ import* ~ top_level* ~ EOI }

top_level = _{
    func
}

block = {
    "{" ~ statement* ~ "}"
}

statement = {
    func | assignment | expression
}

package = { "package" ~ name }
import = { "import" ~ string }
func = { "func" ~ name ~ type_params? ~ signature ~ block }

type_params = {
    "[" ~ (!"]" ~ ANY)* ~ "]"
}

signature = {
    "(" ~ params ~ ")" ~ name?
}

params = {
    (param ~ ("," ~ param)* ~ ","?)?
}

param = {
    name ~ name
}

assignment = { name ~ "=" ~ expression }

name = @{
    XID_START ~ XID_CONTINUE*
}

expression = {
    term ~ (binary_op ~ term)*
}

term = {
    string
    | number
    | call
    | name
    | "(" ~ expression ~ ")"
    | unitary_op
}

string = ${
    "\"" ~ string_inner ~ "\""
}

string_inner = @{
    ("\\\\" | "\\\"" | !"\"" ~ ANY)*
}

number = @{
    NUMBER+ ~ ("." ~ NUMBER*)?
}

binary_op = _{
// Careful with the ordering: prefix matches _last_.
    bool_or |
    bool_and |
    shl | shr | leq | geq |
    eq | neq | lt | gt |
    add | sub | bit_or | bit_xor |
    mul | div | modulo | bit_clear | bit_and |
    dot
}

bool_and = {"&&"}
bool_or = {"||"}
eq = { "==" }
neq = { "!=" }
lt = { "<" }
leq = { "<=" }
gt = { ">" }
geq = { ">=" }
add = {"+"}
sub = {"-"}
bit_or = { "|" }
bit_xor = {"^"}
mul = {"*"}
div = {"/"}
modulo = {"%"}
shl = { "<<" }
shr = { ">>" }
bit_clear = { "&^" }
bit_and = { "&" }
dot = { "." }

unitary_op = {
    "-" ~ expression
}

call = {
    name ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")"
}

WHITESPACE = _{
    SEPARATOR | "\n"
}

COMMENT = _{
    inline_comment | end_of_line_comment
}

inline_comment = {
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

end_of_line_comment = {
    "//" ~ (!"\n" ~ ANY)*
}
